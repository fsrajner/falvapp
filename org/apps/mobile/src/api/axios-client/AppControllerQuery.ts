//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../axios-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import { AppControllerClient as AppControllerClientClass } from '../axios-client';
import { createClient, getClientFactory } from './helpers';

export const Client = () => getClientFactory()(AppControllerClientClass);
import type { AxiosRequestConfig } from 'axios';

export type GetPostByIdAppControllerQueryParameters = {
  id: string ;
}

export type DeletePostAppControllerQueryParameters = {
  id: string ;
}

export type GetFilteredPostsAppControllerQueryParameters = {
  searchString: string ;
}

export type PublishPostAppControllerQueryParameters = {
  id: string ;
}

export function getPostByIdUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/post/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getPostByIdDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey'> = {
  queryFn: __getPostById,
};
export function getGetPostByIdDefaultOptions() {
  return getPostByIdDefaultOptions;
};
export function setGetPostByIdDefaultOptions(options: typeof getPostByIdDefaultOptions) {
  getPostByIdDefaultOptions = options;
}

export function getPostByIdQueryKey(id: string): QueryKey;
export function getPostByIdQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as GetPostByIdAppControllerQueryParameters;

    return trimArrayEnd([
        'AppControllerClient',
        'getPostById',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'AppControllerClient',
        'getPostById',
        ...params
      ]);
  }
}
function __getPostById(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client().getPostById(
      context.queryKey[2] as string);
}

export function useGetPostByIdQuery<TSelectData = void, TError = unknown>(dto: GetPostByIdAppControllerQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;

export function useGetPostByIdQuery<TSelectData = void, TError = unknown>(id: string, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetPostByIdQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as GetPostByIdAppControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getPostById(context, axiosConfig) : __getPostById,
    queryKey: getPostByIdQueryKey(id),
    ...getPostByIdDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setGetPostByIdData(queryClient: QueryClient, updater: (data: void | undefined) => void, id: string) {
  queryClient.setQueryData(getPostByIdQueryKey(id),
    updater
  );
}

export function setGetPostByIdDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function deletePostUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/post/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function deletePostMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'AppControllerClient',
      'deletePost',
      id as any,
    ]);
}

export function useDeletePostMutation<TContext>(id: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = deletePostMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client().deletePost(id),
    mutationKey: key,
  });
}
  
type DeletePost__MutationParameters = DeletePostAppControllerQueryParameters

export function useDeletePostMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, DeletePost__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: DeletePostAppControllerQueryParameters}): UseMutationResult<void, unknown, DeletePost__MutationParameters, TContext> {
  const key = deletePostMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: DeletePost__MutationParameters) => Client().deletePost(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}
  
export function getPublishedPostsUrl(): string {
  let url_ = getBaseUrl() + "/api/feed";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getPublishedPostsDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey'> = {
  queryFn: __getPublishedPosts,
};
export function getGetPublishedPostsDefaultOptions() {
  return getPublishedPostsDefaultOptions;
};
export function setGetPublishedPostsDefaultOptions(options: typeof getPublishedPostsDefaultOptions) {
  getPublishedPostsDefaultOptions = options;
}

export function getPublishedPostsQueryKey(): QueryKey;
export function getPublishedPostsQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'AppControllerClient',
      'getPublishedPosts',
    ]);
}
function __getPublishedPosts(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client().getPublishedPosts(
);
}

export function useGetPublishedPostsQuery<TSelectData = void, TError = unknown>(options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetPublishedPostsQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getPublishedPosts(context, axiosConfig) : __getPublishedPosts,
    queryKey: getPublishedPostsQueryKey(),
    ...getPublishedPostsDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setGetPublishedPostsData(queryClient: QueryClient, updater: (data: void | undefined) => void, ) {
  queryClient.setQueryData(getPublishedPostsQueryKey(),
    updater
  );
}

export function setGetPublishedPostsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function getFilteredPostsUrl(searchString: string): string {
  let url_ = getBaseUrl() + "/api/filtered-posts/{searchString}";
if (searchString === undefined || searchString === null)
  throw new Error("The parameter 'searchString' must be defined.");
url_ = url_.replace("{searchString}", encodeURIComponent("" + searchString));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getFilteredPostsDefaultOptions: Omit<UseQueryOptions<void, unknown, void>, 'queryKey'> = {
  queryFn: __getFilteredPosts,
};
export function getGetFilteredPostsDefaultOptions() {
  return getFilteredPostsDefaultOptions;
};
export function setGetFilteredPostsDefaultOptions(options: typeof getFilteredPostsDefaultOptions) {
  getFilteredPostsDefaultOptions = options;
}

export function getFilteredPostsQueryKey(searchString: string): QueryKey;
export function getFilteredPostsQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { searchString,  } = params[0] as GetFilteredPostsAppControllerQueryParameters;

    return trimArrayEnd([
        'AppControllerClient',
        'getFilteredPosts',
        searchString as any,
      ]);
  } else {
    return trimArrayEnd([
        'AppControllerClient',
        'getFilteredPosts',
        ...params
      ]);
  }
}
function __getFilteredPosts(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client().getFilteredPosts(
      context.queryKey[2] as string);
}

export function useGetFilteredPostsQuery<TSelectData = void, TError = unknown>(dto: GetFilteredPostsAppControllerQueryParameters, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;

export function useGetFilteredPostsQuery<TSelectData = void, TError = unknown>(searchString: string, options?: Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetFilteredPostsQuery<TSelectData = void, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<void, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let searchString: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ searchString,  } = params[0] as GetFilteredPostsAppControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [searchString, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<void, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getFilteredPosts(context, axiosConfig) : __getFilteredPosts,
    queryKey: getFilteredPostsQueryKey(searchString),
    ...getFilteredPostsDefaultOptions as unknown as Omit<UseQueryOptions<void, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setGetFilteredPostsData(queryClient: QueryClient, updater: (data: void | undefined) => void, searchString: string) {
  queryClient.setQueryData(getFilteredPostsQueryKey(searchString),
    updater
  );
}

export function setGetFilteredPostsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: void | undefined) => void) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function createDraftUrl(): string {
  let url_ = getBaseUrl() + "/api/post";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createDraftMutationKey(): MutationKey {
  return trimArrayEnd([
      'AppControllerClient',
      'createDraft',
    ]);
}

export function useCreateDraftMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = createDraftMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client().createDraft(),
    mutationKey: key,
  });
}
  
export function signupUserUrl(): string {
  let url_ = getBaseUrl() + "/api/user";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function signupUserMutationKey(): MutationKey {
  return trimArrayEnd([
      'AppControllerClient',
      'signupUser',
    ]);
}

export function useSignupUserMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, Types.SignUpDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.SignUpDto, TContext> {
  const key = signupUserMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.SignUpDto) => Client().signupUser(body),
    mutationKey: key,
  });
}
  
export function publishPostUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/publish/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function publishPostMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'AppControllerClient',
      'publishPost',
      id as any,
    ]);
}

export function usePublishPostMutation<TContext>(id: string, options?: Omit<UseMutationOptions<void, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, void, TContext> {
  const key = publishPostMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client().publishPost(id),
    mutationKey: key,
  });
}
  
type PublishPost__MutationParameters = PublishPostAppControllerQueryParameters

export function usePublishPostMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<void, unknown, PublishPost__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: PublishPostAppControllerQueryParameters}): UseMutationResult<void, unknown, PublishPost__MutationParameters, TContext> {
  const key = publishPostMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: PublishPost__MutationParameters) => Client().publishPost(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}